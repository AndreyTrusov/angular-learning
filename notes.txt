 To start project -- ng serve
 To generate new component -- ng generate component "name"
 Command to create service --> ng generate service my-service | Creates - my-service.service.ts


 What is a Component?

 In Angular, components are the core pieces of the UI. Each component controls a specific view (part of the interface) and contains:

 HTML: To define the layout.
 CSS: To style the layout.
 TypeScript: To handle logic.

 Think of components as reusable, self-contained blocks of code that control a specific part of your app, like a login form, navigation bar, or user profile card.

@Component:
standalone - When provided the value true, this tells Angular that the component does not need to be declared in an NgModule
imports - Allows developers to declare what dependencies will be used in the component
----- Lesson #1

@Component({
  selector: 'app-root',
  templateUrl: './app.component.html',
  styleUrls: ['./app.component.css']
})
export class AppComponent {
  title = 'my-angular-app';
}

 @Component Decorator: This is how you define a component. It tells Angular what HTML, CSS, and other settings to use.

 selector: This is the custom HTML tag you use to insert this component into your HTML, like <app-root></app-root>.
 templateUrl: Points to the HTML file of the component.
styleUrls: Links to the CSS file for styling.
AppComponent Class: This is where the logic resides. The title property is bound to the template. Right now, it says 'my-angular-app'.
my-first-component.component.spec.ts ( for testing )

To create component -> ng generate component my-first-component

-----

two-way data binding: ( data binding and directives )
In Angular, data binding allows communication between the component's TypeScript logic (the class) and its HTML template (the view). Angular provides four types of data binding:

Interpolation (One-way data binding from class to view)
Event Binding (One-way binding from view to class)
Property Binding (One-way data binding from class to an element property)
Two-way Data Binding (Synchronization between view and class)

--

Interpolation (One-way Binding)
Interpolation allows you to display data from the component's class inside the HTML template.
.ts:
export class AppComponent {
  title: string = 'Welcome to Angular!';
  year: number = 2024;
}
.html:
<h1>{{ title }}</h1>
<p>The year is {{ year }}</p>

--

Event binding allows you to handle user actions (like clicks, key presses, etc.)
in the component’s logic.
.ts:
export class AppComponent {
  message: string = '';

  handleClick() {
    this.message = 'Button was clicked!';
  }
}
.html:
<button (click)="handleClick()">Click Me</button>
<p>{{ message }}</p>

--

Property binding is used to bind values from the component class to HTML element properties,
such as src, href, disabled, etc.
.ts:
export class AppComponent {
  buttonDisabled: boolean = true;
}
.html:
<button [disabled]="buttonDisabled">Click Me</button>

--

Two-way data binding allows the view and the class to stay in sync—changes in the input
field automatically update the class variable and vice versa.
.ts:
export class AppComponent {
  name: string = '';
}
.html:
<input [(ngModel)]="name" placeholder="Enter your name">
<p>Hello, {{ name }}!</p>




----- Directives

Directives are special instructions in Angular that let you modify the DOM.
There are two main types:

Structural Directives: Change the structure of the DOM (e.g., *ngIf, *ngFor).
Attribute Directives: Change the appearance or behavior of elements (e.g., ngClass, ngStyle).

--

The *ngIf directive is used to conditionally render elements based on a boolean expression.
.ts: { isLoggedIn: boolean = false; }
.html:
<button (click)="isLoggedIn = !isLoggedIn">
  {{ isLoggedIn ? 'Logout' : 'Login' }}
</button>

<p *ngIf="isLoggedIn">Welcome back, user!</p>

--

The *ngFor directive allows you to loop through an array and render a list of items.

.ts: { items: string[] = ['Item 1', 'Item 2', 'Item 3']; }
.html:
<ul>
  <li *ngFor="let item of items">{{ item }}</li>
</ul>

--

ngClass Directive - The ngClass directive allows you to dynamically apply
classes to an element based on a condition.
.ts: isActive: boolean = true;
.html:
<p [ngClass]="{ 'active': isActive, 'inactive': !isActive }">This is a toggleable paragraph.</p>
<button (click)="isActive = !isActive">Toggle Class</button>

--

ngStyle Directive - The ngStyle directive dynamically applies inline styles based on component properties.

.ts: isHighlighted: boolean = false;
.html:
<p [ngStyle]="{ 'color': isHighlighted ? 'red' : 'black' }">This text changes color.</p>
<button (click)="isHighlighted = !isHighlighted">Toggle Highlight</button>

-----

Angular Services & Dependency Injection

Service is an Angular class that contains reusable logic or data that can be shared
across multible components. Instead of duplicating code, you can create a service to handle tasks like:
- Fetching data from an API
- Sharing data between components
- Handling business logic

implementation:
@Injectable({
  providedIn: 'root',
})
class CalculatorService {
  add(x: number, y: number) {
    return x + y;
  }
}

component.ts:
export class Receipt {
  private calculatorService = inject(CalculatorService);
  totalCost = this.calculatorService.add(50, 25);
}

Services help keep your components focused on the UI and user interactions, while the service manages complex logic or data.

Dependency Injection - Angular has a built-in mechanism that allows components and services to share dependencies.
This means - no need to manually create instances of services—Angular does it for you and "injects" them where needed.

Command to create service --> ng generate service my-service | Creates - my-service.service.ts

@Injectable Decorator

@Injectable({           // @Injectable decorator marks this class as a service
  providedIn: 'root'    // means this service will be provided globally
})

In a real-world app, services are often used to fetch data from external APIs.
You’d typically use Angular’s HttpClient service for this.

-----

Angular Routing—a key feature for building "single-page applications (SPAs)"
- that allow navigation between different views or pages without reloading the entire app.
- allows you to navigate between different components or views


-----

Types of Directives in Angular - They allow you to attach behavior to elements in the DOM or manipulate those elements in various ways

Component Directives - A component directive controls a chunk of the UI by associating a template with it
Structural Directives * (asterisk) ( *ngiF *ngFor *ngSwitch ) - change the structure of the DOM by adding or removing elements
Attribute Directives - Attribute directives change the appearance or behavior of an existing element, component, or other directive.
    - [ngClass] - ngClass: Dynamically adds/removes classes from an element.
    - [ngStyle] - ngStyle: Applies dynamic inline styles to an element.

Custom Directives - encapsulate custom behaviors
-changes the background color of an element when the user hovers over it:

import { Directive, ElementRef, HostListener } from '@angular/core';

@Directive({
  selector: '[appHoverHighlight]'
})
export class HoverHighlightDirective {
  constructor(private el: ElementRef) {}

  @HostListener('mouseenter') onMouseEnter() {
    this.highlight('yellow');
  }

  @HostListener('mouseleave') onMouseLeave() {
    this.highlight('');
  }

  private highlight(color: string) {
    this.el.nativeElement.style.backgroundColor = color;
  }
}

<p appHoverHighlight>Hover over this text to see the highlight.</p>


-----

NgModules - provide a way to group components, directives, pipes and services.
- helping modularize your app
- lazy loading - parts of app are loaded only when needed
- Every Angular application must have at least one NgModule, typically named AppModule.


------

Rotes:











